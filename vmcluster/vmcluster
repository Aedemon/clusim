#!/usr/bin/env python3.6
import sys
import numpy as np
import csv
import json
import argparse
import multiprocessing as mp
import glob
import os
from functools import partial
import subprocess
import uuid 

def vmcluster_destroy(num_vm):

    for i in range(num_vm):
        subprocess.call('sudo virsh destroy clusim' + str(i), shell=True)
        subprocess.call('sudo virsh detach-interface --domain clusim%d --type network --config --live'%i, shell=True)
        #subprocess.call('sudo brctl delif %s tap%d'%(bridge_name,i), shell=True)
        #subprocess.call('sudo ip link set dev tap%d down'%i, shell=True)
        #subprocess.call('sudo ip link del tap%d'%i, shell=True)
        #subprocess.call('sudo ip link set dev %s down'%(bridge_name), shell=True)
        #subprocess.call('sudo brctl delbr %s'%bridge_name, shell=True)
        subprocess.call('sudo virsh net-destroy default', shell=True)
        subprocess.call('sudo virsh net-destroy isolated', shell=True)
        subprocess.call('sudo virsh list --all', shell=True)
        subprocess.call('sudo virsh net-list --all', shell=True)


if __name__ == "__main__":

    logdir = './sofalog/'
    command = None
    num_vm = 4
    bridge_name = 'br100'
    
    print("Your Python version is %s.%s.%s" % sys.version_info[:3])
    if sys.version_info < (3,6) :
        print("But vmcluster requires minimum version of Python 3.5.")
        quit()

    parser = argparse.ArgumentParser(description='VMCluster')
    parser.add_argument(
        '--logdir',
        metavar='/path/to/logdir/',
        type=str,
        required=False,
        help='path to the directory of vmcluster logged files')
    parser.add_argument('--num_vm', metavar='N', type=int, required=False,
                        help='number of virtual machines in a virtual cluster')
    parser.add_argument('--verbose', dest='verbose', action='store_true')
    parser.set_defaults(verbose=False)
    parser.add_argument(
        'command',
        type=str,
        nargs=1,
        metavar='<create|start|stop|destroy|attach>')

    args = parser.parse_args()
    if args.logdir is not None:
        logdir = args.logdir + '/'

    if args.command is not None:
        command = args.command[0]

    if args.num_vm is not None:
        num_vm = args.num_vm
    
    print("logdir = %s" % logdir)

    ip_addr_begin = '10.0.1.2' 
    ip_addr_end = '10.0.1.' + str(2+num_vm-1)   
    
    if command == 'create':
        print('create virtual bridge and network interfaces ...')
        vmcluster_destroy(num_vm) 
  
        subprocess.call('cp net-default.xml clusim-vlan.xml', shell=True )
        subprocess.call('sed -i -- \'s/%IP_ADDR_BEGIN%/' + str(ip_addr_begin) + '/g\' clusim-vlan.xml', shell=True)
        subprocess.call('sed -i -- \'s/%IP_ADDR_END%/' + str(ip_addr_end) + '/g\' clusim-vlan.xml', shell=True)

        subprocess.call('sudo virsh net-create clusim-vlan.xml', shell=True)
        subprocess.call('sudo virsh net-start default', shell=True)
        subprocess.call('sudo virsh net-create isolated.xml', shell=True)
        subprocess.call('sudo virsh net-start isolated', shell=True)
        subprocess.call('sudo virsh net-list --all', shell=True)
         
        #subprocess.call('sudo brctl addbr %s'%bridge_name, shell=True)
        #    subprocess.call('sudo ip tuntap add tap%d mode tap'%i, shell=True)
        #    #subprocess.call('sudo brctl addif %s tap%d'%(bridge_name,i), shell=True)
        #
        #subprocess.call('sudo ip link set dev %s up'%(bridge_name), shell=True)
        #for i in range(num_vm):
        #    subprocess.call('sudo ip link set dev tap%d up'%i, shell=True)

        print('create %d virtual machines ...'%num_vm)
        for i in range(num_vm):
            vncport = 5900 + i
            path_to_image = '\\/image\\/debian8_vm' + str(i) + '.img'
            mac_addr = '00:16:3e:1a:b3:%02x'%(i+1) 
            isomac_addr = '00:17:3e:1a:b3:%02x'%(i+1) 
            subprocess.call('cp vm-template.xml clusim.xml', shell=True )
            vm_uuid = uuid.uuid1()
            # Virtual Machine
            subprocess.call('sed -i -- \'s/%VMIMAGE%/' + str(path_to_image) + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%VMNAME%/clusim' + str(i) + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%UUID%/' + str(vm_uuid) + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%NETDEV%/tap' + str(i) + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%MAC%/' + mac_addr + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%ISOMAC%/' + isomac_addr + '/g\' clusim.xml', shell=True)
            subprocess.call('sed -i -- \'s/%VNCPORT%/' + str(vncport) + '/g\' clusim.xml', shell=True)
            subprocess.call('sudo virsh create clusim.xml', shell=True)
            # Virtual Network
            subprocess.call('sudo virsh domiflist clusim%d'%i, shell=True)
        subprocess.call('sudo virsh list --all', shell=True)
        subprocess.call('sudo virsh net-list --all', shell=True)
    elif command == 'start':
        print('start virtual machines ...')
        for i in range(num_vm):
            subprocess.call('sudo virsh start clusim' + str(i), shell=True)
    elif command == 'destroy':
        print('destroy virtual machines ...')
        vmcluster_destroy(num_vm) 
    elif command == 'show':
        subprocess.call('sudo virsh list --all', shell=True)
        subprocess.call('sudo virsh net-list --all', shell=True)
    else:
        print("Cannot recognized vmcluster command [%s]" % command)
        quit()
